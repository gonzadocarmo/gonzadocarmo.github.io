{"version":3,"sources":["Icon/index.js","EditTractOwnership/formSchema.js","EditTractOwnership/formUtils.js","EditTractOwnership/index.js","App.js","serviceWorker.js","index.js"],"names":["library","add","faLevelUpAlt","faMinusCircle","faPlus","faSmile","Icon","iconProps","icon","rotation","getIconProps","yup","shape","minerals","of","object","id","string","owner","required","min","max","interest","number","positive","lease","npris","FormErrorMessage","fieldName","name","msg","className","getFormClassName","errors","touched","isInvalid","getIn","classnames","renderForm","removeMineral","onChange","values","items","length","map","mineral","idx","Container","key","style","margin","padding","boxShadow","border","Row","Col","placeholder","data-testid","type","onClick","arrHelper","mineralIdx","removeNPRI","npri","npriIdx","renderNPRIForm","npriIndex","remove","Button","push","uuidv4","value","useState","isLoading","setIsLoading","Spinner","animation","validationSchema","formSchema","initialValues","onSubmit","console","log","setTimeout","isFormValid","Object","keys","arrayHelpers","minIndex","info","marginTop","onClickHandler","disabled","tractOwnerships","App","Jumbotron","EditTractOwnership","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2YAUAA,IAAQC,IAAIC,IAAcC,IAAeC,IAAQC,KAEjD,IA8BeC,EANF,SAAC,GAAc,IACpBC,EAzBa,SAAAC,GACnB,OAAQA,GACN,IAAK,MACH,MAAO,CACLA,KAAM,QAEV,IAAK,SACH,MAAO,CACLA,KAAM,eACNC,SAAU,IAEd,IAAK,SACH,MAAO,CACLD,KAAM,gBAEV,IAAK,QACH,MAAO,CACLA,KAAM,SAEV,QACE,MAAO,IAKOE,CADO,EAAXF,MAGd,OAAO,kBAAC,IAAoBD,I,QCpCfI,QAAaC,MAAM,CAChCC,SAAUF,MAEPG,GACCC,cAASH,MAAM,CACbI,GAAIC,cACJC,MAAOD,cAASE,WAAWC,IAAI,GAAGC,IAAI,IACtCC,SAAUC,cAASJ,WAAWK,WAAWH,IAAI,KAC7CI,MAAOR,cAASE,WAAWC,IAAI,GAAGC,IAAI,IACtCK,MAAOf,MAAYG,GACjBC,cAASH,MAAM,CACbI,GAAIC,cACJC,MAAOD,cAASE,WAAWC,IAAI,GAAGC,IAAI,IACtCC,SAAUC,cAASJ,WAAWK,WAAWH,IAAI,WAKpDF,WACAC,IAAI,K,gBClBIO,EAAmB,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,OAC9B,kBAAC,IAAD,CAAcC,KAAMD,IACjB,SAACE,GAAD,OAAS,yBAAKC,UAAU,oBAAoBD,OAIpCE,EAAmB,SAACC,EAAQC,EAASN,GAChD,IAAMO,EAAYC,YAAMH,EAAQL,GAChC,OAAOS,IAAW,eAAgB,CAChC,YAAaF,EACb,aAAcA,KCgEZG,EAAa,SAAC,EAA6BC,EAAeC,GAAc,IAAxDC,EAAuD,EAAvDA,OAAQR,EAA+C,EAA/CA,OAAQC,EAAuC,EAAvCA,QACpCM,EAASC,EAAO5B,UAChB,IAAM6B,EAAQD,EAAO5B,SACrB,OAAO6B,GAASA,EAAMC,OAAS,EAC3BD,EAAME,KAAI,SAACC,EAASC,GAAV,OACR,kBAACC,EAAA,EAAD,CACEC,IAAG,kBAAaF,EAAb,cACHG,MAAO,CACLC,OAAQ,SACRC,QAAS,OACTC,UAAW,4BACXC,OAAQ,mBAGV,kBAAC,IAAMC,IAAP,CAAWN,IAAG,kBAAaF,EAAb,UACZ,kBAACS,EAAA,EAAD,KACE,kBAAC,IAAD,CACE1B,KAAI,mBAAciB,EAAd,WACJf,UAAWC,EACTC,EACAC,EAFyB,mBAGbY,EAHa,YAK3BU,YAAY,WACZC,cAAA,0BAAgCZ,EAAQ7B,GAAxC,YAEF,kBAAC,EAAD,CAAkBY,UAAS,mBAAckB,EAAd,aAE3B,kBAAC,IAAD,CACEY,KAAK,SACL7B,KAAI,mBAAciB,EAAd,QACJW,cAAA,0BAAgCZ,EAAQ7B,OAG5C,kBAACuC,EAAA,EAAD,KACE,kBAAC,IAAD,CACE1B,KAAI,mBAAciB,EAAd,cACJf,UAAWC,EACTC,EACAC,EAFyB,mBAGbY,EAHa,eAK3BU,YAAY,cACZC,cAAA,0BAAgCZ,EAAQ7B,GAAxC,eAEF,kBAAC,EAAD,CAAkBY,UAAS,mBAAckB,EAAd,iBAE7B,kBAACS,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,KACE,kBAAC,IAAD,CACE1B,KAAI,mBAAciB,EAAd,WACJf,UAAWC,EACTC,EACAC,EAFyB,mBAGbY,EAHa,YAK3BU,YAAY,gBACZC,cAAA,0BAAgCZ,EAAQ7B,GAAxC,YAEF,kBAAC,EAAD,CAAkBY,UAAS,mBAAckB,EAAd,cAE7B,kBAACS,EAAA,EAAD,KACE,0BACEI,QAAS,kBAAMpB,EAAcO,IAC7BW,cAAA,0BAAgCZ,EAAQ7B,GAAxC,YAEA,kBAAC,EAAD,CAAMR,KAAM,cAIlB,kBAAC,IAAM8C,IAAP,CAAWN,IAAG,kBAAaF,EAAb,WACZ,kBAACS,EAAA,EAAD,KACE,kBAAC,IAAD,CAAY1B,KAAI,mBAAciB,EAAd,aACb,SAACc,GACA,OACE,kBAAC,WAAD,KAvIG,SAAC,EAEtBC,EACAC,GACI,IAHFrB,EAGC,EAHDA,OAAQR,EAGP,EAHOA,OAIJS,GADH,EAHeR,QAIJO,EAAO5B,SAASgD,GAAYnC,OAC1C,OAAOgB,GAASA,EAAMC,OAAS,EAC3BD,EAAME,KAAI,SAACmB,EAAMC,GAAP,OACR,kBAACjB,EAAA,EAAD,CAAWC,IAAG,mBAAca,EAAd,iBAAiCG,EAAjC,eACZ,kBAAC,IAAMV,IAAP,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CACE1B,KAAI,mBAAcgC,EAAd,mBAAmCG,EAAnC,WACJjC,UAAWC,EACTC,EACAC,EAFyB,mBAGb2B,EAHa,mBAGQG,EAHR,YAK3BR,YAAY,gBACZC,cAAA,eAAqBM,EAAK/C,GAA1B,YAEF,kBAAC,EAAD,CACEY,UAAS,mBAAciC,EAAd,mBAAmCG,EAAnC,aAEX,kBAAC,IAAD,CACEN,KAAK,SACL7B,KAAI,mBAAcgC,EAAd,mBAAmCG,EAAnC,QACJP,cAAA,eAAqBM,EAAK/C,OAG9B,kBAACuC,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,KACE,kBAAC,IAAD,CACE1B,KAAI,mBAAcgC,EAAd,mBAAmCG,EAAnC,cACJjC,UAAWC,EACTC,EACAC,EAFyB,mBAGb2B,EAHa,mBAGQG,EAHR,eAK3BR,YAAY,cACZC,cAAA,eAAqBM,EAAK/C,GAA1B,eAEF,kBAAC,EAAD,CACEY,UAAS,mBAAciC,EAAd,mBAAmCG,EAAnC,iBAGb,kBAACT,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,KACE,0BACEI,QAAS,kBAAMG,EAAWE,IAC1BP,cAAA,eAAqBM,EAAK/C,GAA1B,YAEA,kBAAC,EAAD,CAAMR,KAAM,kBAMtB,KA8EiByD,CACC,CAAExB,SAAQR,SAAQC,WAClBY,GACA,SAACoB,GACCN,EAAUO,OAAOD,MAInB,kBAACE,EAAA,EAAD,CACET,QAAS,kBACPC,EAAUS,KAAK,CACbrD,GAAIsD,cACJpD,MAAO,GACPO,MAAO,OALb,sBAoBlB,MAGS,cAA0C,IAAD,IAAtC8C,aAAsC,MAA9B,GAA8B,MAA1B/B,gBAA0B,MAAf,aAAe,IACpBgC,oBAAS,GADW,mBAC/CC,EAD+C,KACpCC,EADoC,KAGtD,OAAOD,EACL,6BACE,kBAACE,EAAA,EAAD,CAASC,UAAU,SADrB,4BAKA,kBAAC,WAAD,KACE,kBAACtB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,cACA,kBAACA,EAAA,EAAD,yBACA,kBAACA,EAAA,EAAD,aACA,kBAACA,EAAA,EAAD,eAEF,kBAACD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CACEsB,iBAAkBC,EAClBC,cAAe,CAAElE,SAAU0D,GAC3BS,SAAU,WACRC,QAAQC,IAAI,oBACZR,GAAa,GACbS,YAAW,kBAAMT,GAAa,KAAQ,QAGvC,YAAkC,IAA/BjC,EAA8B,EAA9BA,OAAQR,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACZkD,EAA6C,IAA/BC,OAAOC,KAAKrD,GAAQU,OACxC,OACE,kBAAC,IAAD,KACE,kBAACW,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CAAY1B,KAAK,aACd,SAAC0D,GACA,OACE,kBAAC,WAAD,KACE,kBAACjC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACGjB,EACC,CAAEG,SAAQR,SAAQC,YAClB,SAACsD,GACCD,EAAapB,OAAOqB,MAEtB,WACEP,QAAQQ,KACN,iFAEFjD,EAASC,EAAO5B,eAKxB,kBAACyC,EAAA,EAAD,CAAKL,MAAO,CAAEyC,UAAW,SACvB,kBAACnC,EAAA,EAAD,MAhOPoC,EAiO0B,kBACfJ,EAAalB,KAAK,CAAErD,GAAIsD,iBAjO1D,kBAACF,EAAA,EAAD,CAAQT,QAASgC,GAAjB,4BADsB,IAACA,OA4OP,kBAACrC,EAAA,EAAD,CAAKL,MAAO,CAAEyC,UAAW,SACvB,kBAACnC,EAAA,EAAD,KACE,kBAACa,EAAA,EAAD,CAAQV,KAAK,SAASkC,UAAWR,GAAjC,kBCnPhBS,EAAkB,CACtB,CACE7E,GAAIsD,cACJpD,MAAO,iBACPI,SAAU,GACVG,MAAO,iBACPC,MAAO,CACL,CACEV,GAAIsD,cACJpD,MAAO,cACPI,SAAU,KAEZ,CACEN,GAAIsD,cACJpD,MAAO,WACPI,SAAU,QA2BHwE,MArBf,WACE,OACE,kBAAC/C,EAAA,EAAD,KACE,kBAACO,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACwC,EAAA,EAAD,KACE,sDACyB,kBAAC,EAAD,CAAMvF,KAAK,cAK1C,kBAAC8C,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACyC,EAAD,CAAoBzB,MAAOsB,QCjCjBI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.30e8227c.chunk.js","sourcesContent":["import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport {\n  faLevelUpAlt,\n  faMinusCircle,\n  faPlus,\n  faSmile,\n} from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faLevelUpAlt, faMinusCircle, faPlus, faSmile);\n\nconst getIconProps = icon => {\n  switch (icon) {\n    case 'add':\n      return {\n        icon: 'plus',\n      };\n    case 'indent':\n      return {\n        icon: 'level-up-alt',\n        rotation: 90,\n      };\n    case 'remove':\n      return {\n        icon: 'minus-circle',\n      };\n    case 'smile':\n      return {\n        icon: 'smile',\n      };\n    default:\n      return {};\n  }\n};\n\nconst Icon = ({ icon }) => {\n  const iconProps = getIconProps(icon);\n\n  return <FontAwesomeIcon {...iconProps} />;\n};\n\nexport default Icon;\n","import { string, number, object } from 'yup';\nimport * as yup from 'yup';\n\nexport default yup.object().shape({\n  minerals: yup\n    .array()\n    .of(\n      object().shape({\n        id: string(),\n        owner: string().required().min(1).max(20),\n        interest: number().required().positive().max(100),\n        lease: string().required().min(1).max(20),\n        npris: yup.array().of(\n          object().shape({\n            id: string(),\n            owner: string().required().min(1).max(20),\n            interest: number().required().positive().max(100),\n          })\n        ),\n      })\n    )\n    .required()\n    .min(1),\n});\n","import React from 'react';\nimport { getIn, ErrorMessage } from 'formik';\nimport classnames from 'classnames';\n\nexport const FormErrorMessage = ({ fieldName }) => (\n  <ErrorMessage name={fieldName}>\n    {(msg) => <div className=\"invalid-feedback\">{msg}</div>}\n  </ErrorMessage>\n);\n\nexport const getFormClassName = (errors, touched, fieldName) => {\n  const isInvalid = getIn(errors, fieldName);\n  return classnames('form-control', {\n    'is-valid': !isInvalid,\n    'is-invalid': isInvalid,\n  });\n};\n","import React, { Fragment, useState } from 'react';\nimport {\n  Col,\n  Row,\n  Container,\n  Button,\n  Form as RForm,\n  Spinner,\n} from 'react-bootstrap';\nimport { Formik, Form, FieldArray, Field } from 'formik';\nimport Icon from '../Icon';\nimport { v4 as uuidv4 } from 'uuid';\nimport formSchema from './formSchema';\nimport { getFormClassName, FormErrorMessage } from './formUtils';\n\nconst renderAddButton = (onClickHandler) => (\n  <Button onClick={onClickHandler}>Add Mineral Interest</Button>\n);\nconst renderNPRIForm = (\n  { values, errors, touched },\n  mineralIdx,\n  removeNPRI\n) => {\n  const items = values.minerals[mineralIdx].npris;\n  return items && items.length > 0\n    ? items.map((npri, npriIdx) => (\n        <Container key={`minerals-${mineralIdx}-npri-${npriIdx}-container`}>\n          <RForm.Row>\n            <Col>\n              <Field\n                name={`minerals[${mineralIdx}].npris[${npriIdx}].owner`}\n                className={getFormClassName(\n                  errors,\n                  touched,\n                  `minerals[${mineralIdx}].npris[${npriIdx}].owner`\n                )}\n                placeholder=\"Owner name...\"\n                data-testid={`npri-${npri.id}.owner`}\n              ></Field>\n              <FormErrorMessage\n                fieldName={`minerals[${mineralIdx}].npris[${npriIdx}].owner`}\n              />\n              <Field\n                type=\"hidden\"\n                name={`minerals[${mineralIdx}].npris[${npriIdx}].id`}\n                data-testid={`npri-${npri.id}`}\n              />\n            </Col>\n            <Col></Col>\n            <Col>\n              <Field\n                name={`minerals[${mineralIdx}].npris[${npriIdx}].interest`}\n                className={getFormClassName(\n                  errors,\n                  touched,\n                  `minerals[${mineralIdx}].npris[${npriIdx}].interest`\n                )}\n                placeholder=\"Interest...\"\n                data-testid={`npri-${npri.id}.interest`}\n              ></Field>\n              <FormErrorMessage\n                fieldName={`minerals[${mineralIdx}].npris[${npriIdx}].interest`}\n              />\n            </Col>\n            <Col></Col>\n            <Col>\n              <span\n                onClick={() => removeNPRI(npriIdx)}\n                data-testid={`npri-${npri.id}.remove`}\n              >\n                <Icon icon={'remove'} />\n              </span>\n            </Col>\n          </RForm.Row>\n        </Container>\n      ))\n    : null;\n};\nconst renderForm = ({ values, errors, touched }, removeMineral, onChange) => {\n  onChange(values.minerals);\n  const items = values.minerals;\n  return items && items.length > 0\n    ? items.map((mineral, idx) => (\n        <Container\n          key={`mineral-${idx}-container`}\n          style={{\n            margin: '1rem 0',\n            padding: '1rem',\n            boxShadow: '0 0 10px  rgba(0,0,0,0.6)',\n            border: 'solid 1px #555',\n          }}\n        >\n          <RForm.Row key={`mineral-${idx}-form`}>\n            <Col>\n              <Field\n                name={`minerals[${idx}].owner`}\n                className={getFormClassName(\n                  errors,\n                  touched,\n                  `minerals[${idx}].owner`\n                )}\n                placeholder=\"Owner...\"\n                data-testid={`mineralInterest-${mineral.id}.owner`}\n              ></Field>\n              <FormErrorMessage fieldName={`minerals[${idx}].owner`} />\n\n              <Field\n                type=\"hidden\"\n                name={`minerals[${idx}].id`}\n                data-testid={`mineralInterest-${mineral.id}`}\n              />\n            </Col>\n            <Col>\n              <Field\n                name={`minerals[${idx}].interest`}\n                className={getFormClassName(\n                  errors,\n                  touched,\n                  `minerals[${idx}].interest`\n                )}\n                placeholder=\"Interest...\"\n                data-testid={`mineralInterest-${mineral.id}.interest`}\n              ></Field>\n              <FormErrorMessage fieldName={`minerals[${idx}].interest`} />\n            </Col>\n            <Col></Col>\n            <Col>\n              <Field\n                name={`minerals[${idx}].lease`}\n                className={getFormClassName(\n                  errors,\n                  touched,\n                  `minerals[${idx}].lease`\n                )}\n                placeholder=\"Lease name...\"\n                data-testid={`mineralInterest-${mineral.id}.lease`}\n              ></Field>\n              <FormErrorMessage fieldName={`minerals[${idx}].lease`} />\n            </Col>\n            <Col>\n              <span\n                onClick={() => removeMineral(idx)}\n                data-testid={`mineralInterest-${mineral.id}.remove`}\n              >\n                <Icon icon={'remove'} />\n              </span>\n            </Col>\n          </RForm.Row>\n          <RForm.Row key={`mineral-${idx}-npris`}>\n            <Col>\n              <FieldArray name={`minerals[${idx}].npris`}>\n                {(arrHelper) => {\n                  return (\n                    <Fragment>\n                      {renderNPRIForm(\n                        { values, errors, touched },\n                        idx,\n                        (npriIndex) => {\n                          arrHelper.remove(npriIndex);\n                        }\n                      )}\n                      {\n                        <Button\n                          onClick={() =>\n                            arrHelper.push({\n                              id: uuidv4(),\n                              owner: '',\n                              lease: '',\n                            })\n                          }\n                        >\n                          Add NPRI\n                        </Button>\n                      }\n                    </Fragment>\n                  );\n                }}\n              </FieldArray>\n            </Col>\n          </RForm.Row>\n        </Container>\n      ))\n    : null;\n};\n\nexport default ({ value = [], onChange = () => {} }) => {\n  const [isLoading, setIsLoading] = useState(false);\n\n  return isLoading ? (\n    <div>\n      <Spinner animation=\"grow\" />\n      Sending data... hold on!\n    </div>\n  ) : (\n    <Fragment>\n      <Row>\n        <Col>Owner</Col>\n        <Col>Mineral Interest</Col>\n        <Col>NPRI</Col>\n        <Col>Lease</Col>\n      </Row>\n      <Row>\n        <Col>\n          <Formik\n            validationSchema={formSchema}\n            initialValues={{ minerals: value }}\n            onSubmit={() => {\n              console.log('sending form....');\n              setIsLoading(true);\n              setTimeout(() => setIsLoading(false), 3000);\n            }}\n          >\n            {({ values, errors, touched }) => {\n              const isFormValid = Object.keys(errors).length === 0;\n              return (\n                <Form>\n                  <Row>\n                    <Col>\n                      <FieldArray name=\"minerals\">\n                        {(arrayHelpers) => {\n                          return (\n                            <Fragment>\n                              <Row>\n                                <Col>\n                                  {renderForm(\n                                    { values, errors, touched },\n                                    (minIndex) => {\n                                      arrayHelpers.remove(minIndex);\n                                    },\n                                    () => {\n                                      console.info(\n                                        'Every time you do any of the above actions, the onChange prop should be fired'\n                                      );\n                                      onChange(values.minerals);\n                                    }\n                                  )}\n                                </Col>\n                              </Row>\n                              <Row style={{ marginTop: '2rem' }}>\n                                <Col>\n                                  {renderAddButton(() =>\n                                    arrayHelpers.push({ id: uuidv4() })\n                                  )}\n                                </Col>\n                              </Row>\n                            </Fragment>\n                          );\n                        }}\n                      </FieldArray>\n                    </Col>\n                  </Row>\n                  <Row style={{ marginTop: '2rem' }}>\n                    <Col>\n                      <Button type=\"submit\" disabled={!isFormValid}>\n                        SEND\n                      </Button>\n                    </Col>\n                  </Row>\n                </Form>\n              );\n            }}\n          </Formik>\n        </Col>\n      </Row>\n    </Fragment>\n  );\n};\n","import React from 'react';\nimport { Col, Container, Jumbotron, Row } from 'react-bootstrap';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\nimport EditTractOwnership from './EditTractOwnership';\nimport Icon from './Icon';\n\nconst tractOwnerships = [\n  {\n    id: uuidv4(),\n    owner: 'Luke Skywalker',\n    interest: 0.5,\n    lease: 'Tatooine Lease',\n    npris: [\n      {\n        id: uuidv4(),\n        owner: 'Leia Organa',\n        interest: 0.45,\n      },\n      {\n        id: uuidv4(),\n        owner: 'Han Solo',\n        interest: 0.15,\n      },\n    ],\n  },\n];\n\nfunction App() {\n  return (\n    <Container>\n      <Row>\n        <Col>\n          <Jumbotron>\n            <h1>\n              Landdox Code Challenge <Icon icon=\"smile\" />\n            </h1>\n          </Jumbotron>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <EditTractOwnership value={tractOwnerships} />\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}